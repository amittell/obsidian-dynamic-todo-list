name: CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: [main]

# Cancel previous runs when new commits are pushed (saves $$$)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Essential checks only - runs on ALL branches
  # Estimated cost: ~$0.02 per run, ~2 minutes
  build-and-lint:
    name: Build & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript check
        run: npx tsc --noEmit --skipLibCheck

      - name: ESLint
        run: npx eslint src/**/*.ts

      - name: Build
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -f "main.js" ]; then
            echo "❌ main.js not generated"
            exit 1
          fi
          echo "✅ Build artifacts present"

  # Version consistency check - only on main and PRs to main
  # Estimated cost: ~$0.01 per run, ~1 minute
  release-ready:
    name: Release Ready
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: build-and-lint
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check version consistency
        run: |
          pkg_version=$(node -p "require('./package.json').version")
          manifest_version=$(node -p "require('./manifest.json').version")
          if [ "$pkg_version" != "$manifest_version" ]; then
            echo "❌ Version mismatch: package.json($pkg_version) != manifest.json($manifest_version)"
            exit 1
          fi
          echo "✅ Versions consistent: $pkg_version"

      - name: Check required files
        run: |
          required_files=("manifest.json" "README.md" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"

      - name: Security audit (non-blocking)
        run: npm audit --audit-level high || echo "⚠️ Security issues found (non-blocking)"
        continue-on-error: true
